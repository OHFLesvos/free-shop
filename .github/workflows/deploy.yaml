name: Deploy to production

on:
  push:
    branches: [production]

env:
  PHP_BIN: php81
  PHP_VERSION: "8.1"

jobs:
  deploy-to-prod:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
      - name: Log git hash
        shell: bash
        run: |
          echo "Commit: $(git rev-parse --short HEAD)" >> .gitinfo
          echo "Branch: ${GITHUB_REF#refs/heads/}" >> .gitinfo
          echo "Build date: $(date)" >> .gitinfo
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist  --optimize-autoloader --no-dev
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"
      - run: npm ci
      - run: npm run build
      - name: Enable maintenance mode on remote
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          port: ${{ secrets.REMOTE_PORT }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ${{ secrets.REMOTE_TARGET }}
            if [ -f .env ] && [ -f artisan ]; then ${{ env.PHP_BIN }} artisan down; fi
      - name: Deploy to remote
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          ARGS: "-rltgoDzvO --delete --exclude '.env' --exclude '.git' --exclude 'storage/app/' --exclude 'storage/framework/' --exclude 'storage/logs/' --exclude 'node_modules' --exclude '.vscode' --exclude '.github'"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
      - name: Publish on remote
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          port: ${{ secrets.REMOTE_PORT }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ${{ secrets.REMOTE_TARGET }}
            mkdir -p storage/framework/{sessions,views,cache}
            ${{ env.PHP_BIN }} artisan optimize
            ${{ env.PHP_BIN }} artisan view:clear
            ${{ env.PHP_BIN }} artisan migrate --force
            ${{ env.PHP_BIN }} artisan storage:link
            ${{ env.PHP_BIN }} artisan up
