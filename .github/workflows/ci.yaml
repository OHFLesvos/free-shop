name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  npm-build:
    name: NPM assets build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run dev

  laravel-tests:
    name: Laravel tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Run PHPStan
      run: vendor/bin/phpstan analyse --no-progress
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
        CACHE_DRIVER: array
        SESSION_DRIVER: array
        QUEUE_DRIVER: sync
      run: vendor/bin/phpunit

  php-security-checker:
    name: Local PHP Security Checker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Local PHP Security Checker
        uses: docker://pplotka/local-php-security-checker-github-actions

  deploy-to-staging:
    environment: staging
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Log git hash
      shell: bash
      run: |
        echo "Commit: $(git rev-parse --short HEAD)" >> .gitinfo
        echo "Branch: ${GITHUB_REF#refs/heads/}" >> .gitinfo
        echo "Build date: $(date)" >> .gitinfo
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist  --optimize-autoloader --no-dev
    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
    - run: npm ci
    - run: npm run prod
    - name: Enable maintenance mode on remote
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.REMOTE_HOST }}
        port: ${{ secrets.REMOTE_PORT }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd ${{ secrets.REMOTE_TARGET }}
          if [ -f .env ] && [ -f artisan ]; then php artisan down; fi
    - name: Deploy to remote
      uses: easingthemes/ssh-deploy@v2.1.5
      env:
        ARGS: "-rltgoDzvO --delete --exclude '.env' --exclude '.git' --exclude 'storage/app/' --exclude 'storage/framework/' --exclude 'storage/logs/' --exclude 'node_modules' --exclude '.vscode' --exclude '.github'"
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
        TARGET: ${{ secrets.REMOTE_TARGET }}
    - name: Publish on remote
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.REMOTE_HOST }}
        port: ${{ secrets.REMOTE_PORT }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd ${{ secrets.REMOTE_TARGET }}
          mkdir -p storage/framework/{sessions,views,cache}
          php artisan optimize
          php artisan migrate --force
          php artisan storage:link
          php artisan up
